type DeleteManyPayload {
  deletedCount: Int!
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}

type Mutation {
  deleteManyUsers(query: UserQueryInput): DeleteManyPayload
  deleteManyWords(query: WordQueryInput): DeleteManyPayload
  deleteOneUser(query: UserQueryInput!): User
  deleteOneWord(query: WordQueryInput!): Word
  insertManyUsers(data: [UserInsertInput!]!): InsertManyPayload
  insertManyWords(data: [WordInsertInput!]!): InsertManyPayload
  insertOneUser(data: UserInsertInput!): User
  insertOneWord(data: WordInsertInput!): Word
  replaceOneUser(query: UserQueryInput, data: UserInsertInput!): User
  replaceOneWord(query: WordQueryInput, data: WordInsertInput!): Word
  updateManyUsers(query: UserQueryInput, set: UserUpdateInput!): UpdateManyPayload
  updateManyWords(query: WordQueryInput, set: WordUpdateInput!): UpdateManyPayload
  updateOneUser(query: UserQueryInput, set: UserUpdateInput!): User
  updateOneWord(query: WordQueryInput, set: WordUpdateInput!): Word
  upsertOneUser(query: UserQueryInput, data: UserInsertInput!): User
  upsertOneWord(query: WordQueryInput, data: WordInsertInput!): Word
}

scalar ObjectId

type Query {
  user(query: UserQueryInput): User
  users(query: UserQueryInput, limit: Int = 100, sortBy: UserSortByInput): [User]!
  word(query: WordQueryInput): Word
  words(limit: Int = 100, sortBy: WordSortByInput, query: WordQueryInput): [Word]!
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type User {
  _id: ObjectId!
  email: String!
  user_id: String!
}

input UserInsertInput {
  email: String!
  _id: ObjectId
  user_id: String!
}

input UserQueryInput {
  user_id_lte: String
  user_id: String
  email_nin: [String]
  _id_nin: [ObjectId]
  email_exists: Boolean
  user_id_in: [String]
  OR: [UserQueryInput!]
  _id_exists: Boolean
  AND: [UserQueryInput!]
  _id_gte: ObjectId
  _id_lte: ObjectId
  email: String
  _id_ne: ObjectId
  _id: ObjectId
  email_lt: String
  user_id_ne: String
  user_id_gte: String
  email_gt: String
  user_id_lt: String
  email_ne: String
  user_id_exists: Boolean
  _id_lt: ObjectId
  _id_gt: ObjectId
  user_id_gt: String
  email_in: [String]
  _id_in: [ObjectId]
  email_lte: String
  user_id_nin: [String]
  email_gte: String
}

enum UserSortByInput {
  EMAIL_ASC
  EMAIL_DESC
  _ID_ASC
  _ID_DESC
  USER_ID_ASC
  USER_ID_DESC
}

input UserUpdateInput {
  email_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
  user_id: String
  user_id_unset: Boolean
  email: String
}

type Word {
  _id: ObjectId!
  categories: [String]!
  notes: String
  status: String!
  text: String!
  user: User!
}

input WordInsertInput {
  text: String!
  notes: String
  categories: [String]!
  status: String!
  _id: ObjectId
  user: WordUserRelationInput!
}

input WordQueryInput {
  _id_exists: Boolean
  text_gte: String
  status_nin: [String]
  notes_gte: String
  categories_exists: Boolean
  _id_lte: ObjectId
  text_lte: String
  status_exists: Boolean
  status_gte: String
  text_in: [String]
  categories_in: [String]
  _id_in: [ObjectId]
  OR: [WordQueryInput!]
  notes_in: [String]
  _id_gte: ObjectId
  _id_gt: ObjectId
  notes_gt: String
  status_gt: String
  text_lt: String
  notes_nin: [String]
  notes_lt: String
  AND: [WordQueryInput!]
  text_gt: String
  text_exists: Boolean
  status: String
  notes_lte: String
  notes_exists: Boolean
  status_lte: String
  user_exists: Boolean
  text_ne: String
  _id: ObjectId
  user: UserQueryInput
  notes: String
  status_lt: String
  text_nin: [String]
  categories_nin: [String]
  status_in: [String]
  notes_ne: String
  text: String
  status_ne: String
  _id_lt: ObjectId
  _id_nin: [ObjectId]
  _id_ne: ObjectId
  categories: [String]
}

enum WordSortByInput {
  USER_ASC
  NOTES_ASC
  NOTES_DESC
  TEXT_ASC
  TEXT_DESC
  STATUS_ASC
  STATUS_DESC
  _ID_ASC
  _ID_DESC
  USER_DESC
}

input WordUpdateInput {
  _id_unset: Boolean
  user: WordUserRelationInput
  categories_unset: Boolean
  _id: ObjectId
  text_unset: Boolean
  notes: String
  text: String
  user_unset: Boolean
  status_unset: Boolean
  notes_unset: Boolean
  categories: [String]
  status: String
}

input WordUserRelationInput {
  link: String
  create: UserInsertInput
}
